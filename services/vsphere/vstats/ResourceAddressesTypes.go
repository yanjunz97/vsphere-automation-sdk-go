/* Copyright Â© 2019 VMware, Inc. All Rights Reserved.
   SPDX-License-Identifier: BSD-2-Clause */

// Code generated. DO NOT EDIT.

/*
 * Data type definitions file for service: ResourceAddresses.
 * Includes binding types of a structures and enumerations defined in the service.
 * Shared by client-side stubs and server-side skeletons to ensure type
 * compatibility.
 */

package vstats

import (
	"reflect"
	"gitlab.eng.vmware.com/golangsdk/vsphere-automation-sdk-go/runtime/bindings"
	"gitlab.eng.vmware.com/golangsdk/vsphere-automation-sdk-go/runtime/data"
	"gitlab.eng.vmware.com/golangsdk/vsphere-automation-sdk-go/runtime/protocol"
)

// Resource type for ``ResourceAddresses``. **Warning:** This constant field is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
const ResourceAddresses_RESOURCE_TYPE = "com.vmware.vstats.model.RsrcAddr"


// The ``Info`` class contains global address of a specific Resource. **Warning:** This class is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
type ResourceAddressesInfo struct {
    // Identifier. **Warning:** This property is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
	Id string
    // List of Resource Identifiers. **Warning:** This property is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
	ResourceIds []RsrcId
}

// The ResourceAddressesListResult class contains properties used to return the resource addresses. **Warning:** This class is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
type ResourceAddressesListResult struct {
    // List of Resource Addresses received. **Warning:** This property is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
	RsrcAddrs []ResourceAddressesInfo
    // Used to retrieve paged data for larger result sets. Token is generated by server. The value of this field should be supplied in a subsequent call to ResourceAddresses#list method. **Warning:** This property is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
	Next *string
}

// ``FilterSpec`` class describes filter criteria for resource addresses. **Warning:** This class is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
type ResourceAddressesFilterSpec struct {
    // List of Resource types. **Warning:** This property is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
	Types []string
    // Resources to include in the query. Each resource is specified through a composite string that follows the following format. 
    //
    //  ``type.<resource type>[.<scheme>]=<resource id>`` 
    //
    //  **resource type** specifies the type of resource for example ``VM``, ``VCPU`` etc. 
    //
    //  **scheme** is an optional element to disambiguate the resource as needed for example to differentiate managed object id from ``uuid``. 
    //
    //  **resource id** is the unique resource identifier value for example: ``vm-41`` 
    //
    //  Example values include: ``type.VM=vm-41``, ``type.VCPU=1``, ``type.VM.moid=vm-41``. **Warning:** This property is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
	Resources []string
    // The ``page`` field is used to retrieve paged data for large result sets. It is an opaque paging token obtained from a prior call to the ResourceAddresses#list API. **Warning:** This property is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
	Page *string
}



func resourceAddressesListInputType() bindings.StructType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["filter"] = bindings.NewOptionalType(bindings.NewReferenceType(ResourceAddressesFilterSpecBindingType))
	fieldNameMap["filter"] = "Filter"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("operation-input", fields, reflect.TypeOf(data.StructValue{}), fieldNameMap, validators)
}

func resourceAddressesListOutputType() bindings.BindingType {
	return bindings.NewReferenceType(ResourceAddressesListResultBindingType)
}

func resourceAddressesListRestMetadata() protocol.OperationRestMetadata {
	fields := map[string]bindings.BindingType{}
	fieldNameMap := map[string]string{}
	paramsTypeMap := map[string]bindings.BindingType{}
	pathParams := map[string]string{}
	queryParams := map[string]string{}
	headerParams := map[string]string{}
	fields["filter"] = bindings.NewOptionalType(bindings.NewReferenceType(ResourceAddressesFilterSpecBindingType))
	fieldNameMap["filter"] = "Filter"
	paramsTypeMap["filter.types"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewIdType([]string{"com.vmware.vstats.model.RsrcType"}, ""), reflect.TypeOf([]string{})))
	paramsTypeMap["filter.page"] = bindings.NewOptionalType(bindings.NewStringType())
	paramsTypeMap["filter.resources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	queryParams["filter.types"] = "types"
	queryParams["filter.page"] = "page"
	queryParams["filter.resources"] = "rsrcs"
	resultHeaders := map[string]string{}
	errorHeaders := map[string]string{}
	errorHeaders["Unauthenticated.challenge"] = "WWW-Authenticate"
	return protocol.NewOperationRestMetadata(
		fields,
		fieldNameMap,
		paramsTypeMap,
		pathParams,
		queryParams,
		headerParams,
		"",
		"",
		"GET",
		"/stats/rsrc-addrs",
		resultHeaders,
		200,
		errorHeaders,
		map[string]int{"Error": 500,"InvalidArgument": 400,"Unauthenticated": 401,"Unauthorized": 403})
}

func resourceAddressesGetInputType() bindings.StructType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["id"] = bindings.NewIdType([]string{"com.vmware.vstats.model.RsrcAddr"}, "")
	fieldNameMap["id"] = "Id"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("operation-input", fields, reflect.TypeOf(data.StructValue{}), fieldNameMap, validators)
}

func resourceAddressesGetOutputType() bindings.BindingType {
	return bindings.NewReferenceType(ResourceAddressesInfoBindingType)
}

func resourceAddressesGetRestMetadata() protocol.OperationRestMetadata {
	fields := map[string]bindings.BindingType{}
	fieldNameMap := map[string]string{}
	paramsTypeMap := map[string]bindings.BindingType{}
	pathParams := map[string]string{}
	queryParams := map[string]string{}
	headerParams := map[string]string{}
	fields["id"] = bindings.NewIdType([]string{"com.vmware.vstats.model.RsrcAddr"}, "")
	fieldNameMap["id"] = "Id"
	paramsTypeMap["id"] = bindings.NewIdType([]string{"com.vmware.vstats.model.RsrcAddr"}, "")
	paramsTypeMap["id"] = bindings.NewIdType([]string{"com.vmware.vstats.model.RsrcAddr"}, "")
	pathParams["id"] = "id"
	resultHeaders := map[string]string{}
	errorHeaders := map[string]string{}
	errorHeaders["Unauthenticated.challenge"] = "WWW-Authenticate"
	return protocol.NewOperationRestMetadata(
		fields,
		fieldNameMap,
		paramsTypeMap,
		pathParams,
		queryParams,
		headerParams,
		"",
		"",
		"GET",
		"/stats/rsrc-addrs/{id}",
		resultHeaders,
		200,
		errorHeaders,
		map[string]int{"Error": 500,"InvalidArgument": 400,"NotFound": 404,"Unauthenticated": 401,"Unauthorized": 403})
}


func ResourceAddressesInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["id"] = bindings.NewIdType([]string{"com.vmware.vstats.model.RsrcAddr"}, "")
	fieldNameMap["id"] = "Id"
	fields["resource_ids"] = bindings.NewListType(bindings.NewReferenceType(RsrcIdBindingType), reflect.TypeOf([]RsrcId{}))
	fieldNameMap["resource_ids"] = "ResourceIds"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.vstats.resource_addresses.info", fields, reflect.TypeOf(ResourceAddressesInfo{}), fieldNameMap, validators)
}

func ResourceAddressesListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rsrc_addrs"] = bindings.NewListType(bindings.NewReferenceType(ResourceAddressesInfoBindingType), reflect.TypeOf([]ResourceAddressesInfo{}))
	fieldNameMap["rsrc_addrs"] = "RsrcAddrs"
	fields["next"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["next"] = "Next"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.vstats.resource_addresses.list_result", fields, reflect.TypeOf(ResourceAddressesListResult{}), fieldNameMap, validators)
}

func ResourceAddressesFilterSpecBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["types"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewIdType([]string{"com.vmware.vstats.model.RsrcType"}, ""), reflect.TypeOf([]string{})))
	fieldNameMap["types"] = "Types"
	fields["resources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["resources"] = "Resources"
	fields["page"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["page"] = "Page"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.vstats.resource_addresses.filter_spec", fields, reflect.TypeOf(ResourceAddressesFilterSpec{}), fieldNameMap, validators)
}

